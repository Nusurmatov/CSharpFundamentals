// Problem 10 - SoftUni Course Planning:
List<string> ReadStringList(string splitter = ":") => Console.ReadLine().Split(splitter).ToList();
var schedule = ReadStringList(splitter: ", ");
var command = ReadStringList();

string lessonTitle = string.Empty;
while (command[0] != "course start")
{
    lessonTitle = command[1];
    if (!schedule.Contains(lessonTitle))
    {
        switch (command[0])
        {
            case "Add":    
                schedule.Add(lessonTitle);                
                break;        
            case "Insert":  
                int index = int.Parse(command[2]);
                index += schedule[index].Contains("Exercise") ? 1 : 0;
                schedule.Insert(index, lessonTitle);
                break;         
            case "Exercise":
                schedule.Add($"{lessonTitle}");
                schedule.Add($"{lessonTitle}-Exercise");
                break;                
        }
    }
    else// Problem 10 - SoftUni Course Planning:
List<string> ReadStringList(string splitter = ":") => Console.ReadLine().Split(splitter).ToList();
var schedule = ReadStringList(splitter: ", ");
var command = ReadStringList();

string lessonTitle = string.Empty;
while (command[0] != "course start")
{
    lessonTitle = command[1];
    switch (command[0])
    {
        case "Add":
            if (!schedule.Contains(lessonTitle))
                schedule.Add(lessonTitle);
            break;
        case "Insert":
            if (!schedule.Contains(lessonTitle))
                schedule.Insert(int.Parse(command[2]), lessonTitle);
            break;
        case "Remove":
            schedule.RemoveAll(lesson => lesson.Contains(lessonTitle));
            break;
        case "Swap":
            string lessonTitle1 = command[2];
            if (schedule.Contains(lessonTitle) && schedule.Contains(lessonTitle1))
            {
                bool hasLesson1Exercise = schedule.Any(lesson => lesson == $"{lessonTitle}-Exercise"); 
                bool hasLesson2Exercise = schedule.Any(lesson => lesson == $"{lessonTitle1}-Exercise"); 

                List<string> result = new();
                foreach (var lesson in schedule)
                {
                    if (lesson == lessonTitle)
                    {
                        result.Add(lessonTitle1);
                        if (hasLesson2Exercise)
                        {
                            result.Add($"{lessonTitle1}-Exercise");
                        }
                    }
                    else if (lesson == lessonTitle1)
                    {
                        result.Add(lessonTitle);
                        if (hasLesson1Exercise)
                        {
                            result.Add($"{lessonTitle}-Exercise");
                        }
                    }
                    else if (!lesson.Contains(lessonTitle) && !lesson.Contains(lessonTitle1))
                    {
                        result.Add(lesson);
                    }
                }

                schedule = result;
            }
            break;
        case "Exercise":
            if (schedule.Contains(lessonTitle) )
            {
                if (!schedule.Contains($"{lessonTitle}-Exercise"))
                {
                    schedule.Insert(schedule.IndexOf(lessonTitle) + 1, $"{lessonTitle}-Exercise");
                }
            }
            else
            {
                schedule.Add(lessonTitle);
                schedule.Add($"{lessonTitle}-Exercise");
            }
            break;
    }

    command = ReadStringList();
}

int i = 0;
schedule.ForEach(lesson => Console.WriteLine($"{++i}.{lesson}"));

    {
        switch (command[0])
        {
            case "Remove":        
                schedule.RemoveAll(lesson => lesson.Contains(lessonTitle));                
                break;   
            case "Swap": 
                string lessonTitle1 = command[2];
                if (schedule.Contains(lessonTitle1))
                {
                    bool hasLesson1Exercise = schedule.Any(lesson => lesson == $"{lessonTitle}-Exercise"); 
                    bool hasLesson2Exercise = schedule.Any(lesson => lesson == $"{lessonTitle1}-Exercise"); 

                    List<string> result = new();
                    foreach (var lesson in schedule)
                    {
                        if (lesson == lessonTitle)
                        {
                            result.Add(lessonTitle1);
                            if (hasLesson2Exercise)
                            {
                                result.Add($"{lessonTitle1}-Exercise");
                            }
                        }
                        else if (lesson == lessonTitle1)
                        {
                            result.Add(lessonTitle);
                            if (hasLesson1Exercise)
                            {
                                result.Add($"{lessonTitle}-Exercise");
                            }
                        }
                        else if (!lesson.Contains(lessonTitle) && !lesson.Contains(lessonTitle1))
                        {
                            result.Add(lesson);
                        }
                    }

                    schedule = result;
                }
                break;        
            case "Exercise":
                schedule.Insert(schedule.IndexOf(lessonTitle) + 1, $"{lessonTitle}-Exercise");
                break;        
        } 
        }
    command = ReadStringList();
}

int i = 0;
schedule.ForEach(lesson => Console.WriteLine($"{++i}.{lesson}"));
